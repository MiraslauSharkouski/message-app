import dotenv from "dotenv";
import express from "express";
import { Application } from "express";
import routes from "./routes";

// @description: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
// @purpose: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// @description: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
// @purpose: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
const errorHandler = (
  err: Error,
  req: express.Request,
  res: express.Response,
  next: express.NextFunction
) => {
  console.error("Unhandled error:", err);

  // @description: –í–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
  // @purpose: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —É—Ç–µ—á–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  res.status(500).json({
    success: false,
    message: "Internal server error",
  });
};

class App {
  public app: Application;
  public port: number;

  constructor(port: number) {
    this.app = express();
    this.port = port;

    this.initializeMiddlewares();
    this.initializeRoutes();
    this.initializeErrorHandling();
  }

  private initializeMiddlewares(): void {
    // @description: Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    // @purpose: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ JSON
    this.app.use(express.json());

    // @description: Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ URL-encoded –¥–∞–Ω–Ω—ã—Ö
    // @purpose: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    this.app.use(express.urlencoded({ extended: true }));

    // @description: Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    // @purpose: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.app.use((req, res, next) => {
      console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
      next();
    });

    // @description: Middleware –¥–ª—è CORS (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    // @purpose: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞–∑–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    this.app.use((req, res, next) => {
      res.header("Access-Control-Allow-Origin", "*");
      res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE");
      res.header(
        "Access-Control-Allow-Headers",
        "Origin, X-Requested-With, Content-Type, Accept"
      );
      next();
    });
  }

  private initializeRoutes(): void {
    // @description: –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
    // @purpose: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
    this.app.get("/", (req, res) => {
      res.send("Message App Server is running!");
    });

    // @description: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
    // @base_path: /api
    this.app.use("/api", routes);
  }

  private initializeErrorHandling(): void {
    // @description: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    // @purpose: –ü–µ—Ä–µ—Ö–≤–∞—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    this.app.use(errorHandler);
  }

  public listen(): void {
    this.app.listen(this.port, () => {
      console.log(`üöÄ Server is running on port ${this.port}`);
      console.log(`üìù API Documentation:`);
      console.log(`   GET  http://localhost:${this.port}/`);
      console.log(`   POST http://localhost:${this.port}/api/messages`);
      console.log(`   GET  http://localhost:${this.port}/api/messages`);
      console.log(`   GET  http://localhost:${this.port}/api/messages/:id`);
      console.log(`   GET  http://localhost:${this.port}/api/health`);
    });
  }
}

const port = parseInt(process.env.PORT || "5000");
const app = new App(port);
app.listen();
